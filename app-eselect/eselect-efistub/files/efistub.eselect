# -*-eselect-*-  vim: ft=eselect
# Copyright 2005-2021 Gentoo Authors
# Distributed under the terms of the GNU GPL version 2 or later

DESCRIPTION="Manage unified kernel images"
MAINTAINER="me@concord.sh"

# sort function for kernel versions, to be used in a pipe
sort_kernel_versions() {
	local vsort="sort --version-sort"
	# Test if our sort supports the --version-sort option
	# (should be GNU sort, since the kernel module is GNU/Linux specific)
	${vsort} </dev/null &>/dev/null || vsort=sort

	# We sort kernel versions as follows:
	# 1. Run sed to prepend the version string by the numeric version
	#    and an additional rank indicator that is 0 for release candidates
	#    or 1 otherwise. After this step we have, for example:
	#      2.6.29 1 linux-2.6.29
	#      2.6.29 0 linux-2.6.29-rc8
	# 2. sort --version-sort
	# 3. Run sed again to remove the prepended keys from step 1.
	sed -e 's/^\(linux-\)\?\([[:digit:].]\+\)[-_]rc/\2 0 &/' \
		-e 't;s/^\(linux-\)\?\([[:digit:].]\+\)/\2 1 &/' \
		| LC_ALL=C ${vsort} | sed 's/.* //'
}

# find a list of available built kernels
find_targets() {
	local f
	for f in "${EROOT}"/boot/vmlinuz-*; do
		local n="$(basename "${f}")"
		[[ -f "${EROOT}"/boot/"${n}" ]] || continue
		echo "${n##vmlinuz-}"
	done | sort_kernel_versions
}

# find a list of built unified kernel images
find_built() {
	local f
	[[ -d "${EROOT}"/boot/EFI/Linux ]] || return
	for f in $(find "${EROOT}"/boot/EFI/Linux -name '*.efi'); do
		local b="$(basename "${f}")"
		[[ -f "${EROOT}"/boot/EFI/Linux/"${b}" ]] || continue
		local n="${b##vmlinuz-}"
		echo "${n%.efi}"
	done | sort_kernel_versions
}

# determine if the given PEI is signed
is_signed() {
	local f=$1
	[[ ! -f "${f}" ]] && f="${EROOT}/boot/EFI/Linux/vmlinuz-${1}.efi"
	[[ -f "${f}" ]] && [[ -n "$(sbverify --list "${f}" 2>/dev/null)" ]]
}

# build the unified kernel image
build_image() {
	local target=$1 kernel=

	if is_number "${target}"; then
		local targets=( $(find_targets) )
		[[ ${target} -ge 1 && ${target} -le ${#targets[@]} ]] \
			|| die -q "Number out of range: $1"
		target=${targets[target-1]}
	fi

	if [[ -n ${target} ]]; then
		if [[ -f ${EROOT}/boot/${target} ]]; then
			kernel="${target}"
		elif [[ -f ${EROOT}/boot/vmlinuz-${target} ]]; then
			kernel=vmlinuz-${target}
		fi
	fi
	[[ -n ${kernel} ]] || die -q "Target \"$1\" doesn't appear to be valid!"

	[[ ! -f "${EROOT}"/usr/lib/systemd/boot/efi/linuxx64.efi.stub ]] \
		&& die -q "systemd-boot stub not found! Building cannot proceed."
	[[ -d "${EROOT}/boot/EFI/Linux" ]] || mkdir "${EROOT}/boot/EFI/Linux"

	local initrd="initramfs-${target}.img"

	if [[ -f "${EROOT}/boot/${initrd}" ]]; then
		echo "Found initramfs at ${initrd}"
		objcopy \
			--add-section .osrel="${EROOT}/etc/os-release" \
			--change-section-vma .osrel=0x20000 \
			--add-section .cmdline="${EROOT}/etc/kernel/cmdline" \
			--change-section-vma .cmdline=0x30000 \
			--add-section .splash="${EROOT}/etc/kernel/splash.bmp" \
			--change-section-vma .splash=0x40000 \
			--add-section .linux="${EROOT}/boot/${kernel}" \
			--change-section-vma .linux=0x2000000 \
			--add-section .initrd="${EROOT}/boot/${initrd}" \
			--change-section-vma .initrd=0x4000000 \
			"${EROOT}/usr/lib/systemd/boot/efi/linuxx64.efi.stub" \
			"${EROOT}/boot/EFI/Linux/${kernel}.efi" \
			&& echo "Built ${kernel} (with initramfs)"
	else
		echo "Did not find an initramfs"
		objcopy \
			--add-section .osrel="${EROOT}/etc/os-release" \
			--change-section-vma .osrel=0x20000 \
			--add-section .cmdline="${EROOT}/etc/kernel/cmdline" \
			--change-section-vma .cmdline=0x30000 \
			--add-section .splash="${EROOT}/etc/kernel/splash.bmp" \
			--change-section-vma .splash=0x40000 \
			--add-section .linux="${EROOT}/boot/${kernel}" \
			--change-section-vma .linux=0x2000000 \
			"${EROOT}/usr/lib/systemd/boot/efi/linuxx64.efi.stub" \
			"${EROOT}/boot/EFI/Linux/${kernel}.efi" \
			&& echo "Built ${kernel} (no initramfs)"
	fi
}

# sign the unified kernel image
sign_image() {
	local target=$1
	local d="${EROOT}/boot/EFI/Linux"

	if is_number "${target}"; then
		local targets=( $(find_targets) ) built=( $(find_built) )
		local orphans=() new_built=()
		for (( i = 0; i < ${#built[@]}; i++ )); do
			if [[ ! " ${targets[*]} " =~ " ${built[i]} " ]]; then
				orphans+=( "${built[i]}" )
			else
				new_built+=( "${built[i]}" )
			fi
		done
		[[ ${target} -ge 1 && ${target} -le ${#new_built[@]} ]] \
			|| die -q "Number out of range: $1"
		target=${new_built[target-1]}
	fi

	if [[ -n ${target} ]]; then
		if [[ -f "${d}/${target}" ]]; then
			:
		elif [[ -f "${d}/vmlinuz-${target}.efi" ]]; then
			target=vmlinuz-${target}.efi
		else					# target not valid
			target=
		fi
	fi
	[[ -n ${target} ]] || die -q "Target \"$1\" doesn't appear to be valid!"

	target="${d}/${target}"
	if is_signed "${target}"; then
		die -q "Target \"$1\" is already signed!"
	fi

	sbsign \
		--key /etc/secureboot/db.key \
		--cert /etc/secureboot/db.crt \
		--output "${target}" \
		"${target}"	
}

### list action ###

describe_list() {
	echo "List available kernel targets and unified kernel images"
}

do_list() {
	local i targets=( $(find_targets) ) built=( $(find_built) )
	local orphans=() new_built=()

	write_list_start "Available kernel targets:"
	write_numbered_list -m "(none found)" "${targets[@]}"

	echo
	write_list_start "Built unified kernel images:"
	for (( i = 0; i < ${#built[@]}; i++ )); do
		if [[ ! " ${targets[*]} " =~ " ${built[i]} " ]]; then
			if is_signed "${built[i]}"; then
				orphans+=( "${built[i]} $(highlight "(signed)")" )
			else
				orphans+=( "${built[i]}" )
			fi
		elif is_signed "${built[i]}"; then
			new_built+=( "${built[i]} $(highlight "(signed)")" )
		else
			new_built+=( "${built[i]}" )
		fi
	done
	# compress spaces in built list
	write_numbered_list -m "(none found)" "${new_built[@]}"

	echo
	write_list_start "Orphaned unified kernel images:"
	write_numbered_list -m "(none found)" "${orphans[@]}"
}

### build action ###

describe_build() {
	echo "Build a new unified kernel image"
}

describe_build_parameters() {
	echo "<target>"
}

describe_build_options() {
	echo "target : Target name or number (from 'list' action)"
}

do_build() {
	[[ -z $1 ]] && die -q "You didn't tell me which image to build"
	[[ $# -gt 1 ]] && die -q "Too many parameters"

	build_image "$1" || die -q "Couldn't build the unified kernel image"
}

### sign action ###

describe_sign() {
	echo "Sign a unified kernel image for secure boot"
}

describe_sign_parameters() {
	echo "<target>"
}

describe_sign_options() {
	echo "target : Target name or number (from 'list' action)"
}

do_sign() {
	[[ -z $1 ]] && die -q "You didn't tell me which image to sign"
	[[ $# -gt 1 ]] && die -q "Too many parameters"

	sign_image "$1" || die -q "Couldn't sign the unified kernel image"
}

### clean action ###

describe_clean() {
	echo "Remove orphaned unified kernel images"
}

describe_clean_options() {
	echo "--force : do not use 'rm -i'"
}

do_clean() {
	local i f targets=( $(find_targets) ) built=( $(find_built) )
	local force
	if [[ $1 == "--force" ]]; then
		force=1
		shift
	fi

	for (( i = 0; i < ${#built[@]}; i++ )); do
		if [[ ! " ${targets[*]} " =~ " ${built[i]} " ]]; then
			[[ -f "${EROOT}/boot/EFI/Linux/${built[i]}.efi" ]] \
				&& f="${EROOT}/boot/EFI/Linux/${built[i]}.efi"
			[[ -f "${EROOT}/boot/EFI/Linux/vmlinuz-${built[i]}.efi" ]] \
				&& f="${EROOT}/boot/EFI/Linux/vmlinuz-${built[i]}.efi"
			if [[ -n ${force} ]]; then
				rm -fv "${f}"
			else
				rm -iv "${f}"
			fi
		fi
	done
}
